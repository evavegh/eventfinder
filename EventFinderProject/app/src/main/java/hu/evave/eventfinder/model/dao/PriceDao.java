package hu.evave.eventfinder.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import hu.evave.eventfinder.model.Currency;
import hu.evave.eventfinder.model.PriceType;
import hu.evave.eventfinder.model.converter.CurrencyConverter;
import hu.evave.eventfinder.model.converter.PriceConverter;
import hu.evave.eventfinder.model.converter.PriceTypeConverter;
import java.math.BigDecimal;

import hu.evave.eventfinder.model.Price;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "price".
*/
public class PriceDao extends AbstractDao<Price, Long> {

    public static final String TABLENAME = "price";

    /**
     * Properties of entity Price.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property EventId = new Property(1, String.class, "eventId", false, "event_id");
        public final static Property Currency = new Property(2, String.class, "currency", false, "currency");
        public final static Property Amount = new Property(3, long.class, "amount", false, "amount");
        public final static Property Type = new Property(4, String.class, "type", false, "type");
    }

    private final CurrencyConverter currencyConverter = new CurrencyConverter();
    private final PriceConverter amountConverter = new PriceConverter();
    private final PriceTypeConverter typeConverter = new PriceTypeConverter();
    private Query<Price> event_PricesQuery;

    public PriceDao(DaoConfig config) {
        super(config);
    }
    
    public PriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"price\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"event_id\" TEXT," + // 1: eventId
                "\"currency\" TEXT NOT NULL ," + // 2: currency
                "\"amount\" INTEGER NOT NULL ," + // 3: amount
                "\"type\" TEXT);"); // 4: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"price\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Price entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(2, eventId);
        }
        stmt.bindString(3, currencyConverter.convertToDatabaseValue(entity.getCurrency()));
        stmt.bindLong(4, amountConverter.convertToDatabaseValue(entity.getAmount()));
 
        PriceType type = entity.getType();
        if (type != null) {
            stmt.bindString(5, typeConverter.convertToDatabaseValue(type));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Price entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(2, eventId);
        }
        stmt.bindString(3, currencyConverter.convertToDatabaseValue(entity.getCurrency()));
        stmt.bindLong(4, amountConverter.convertToDatabaseValue(entity.getAmount()));
 
        PriceType type = entity.getType();
        if (type != null) {
            stmt.bindString(5, typeConverter.convertToDatabaseValue(type));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Price readEntity(Cursor cursor, int offset) {
        Price entity = new Price( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // eventId
            currencyConverter.convertToEntityProperty(cursor.getString(offset + 2)), // currency
            amountConverter.convertToEntityProperty(cursor.getLong(offset + 3)), // amount
            cursor.isNull(offset + 4) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 4)) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Price entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurrency(currencyConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setAmount(amountConverter.convertToEntityProperty(cursor.getLong(offset + 3)));
        entity.setType(cursor.isNull(offset + 4) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Price entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Price entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Price entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "prices" to-many relationship of Event. */
    public List<Price> _queryEvent_Prices(String eventId) {
        synchronized (this) {
            if (event_PricesQuery == null) {
                QueryBuilder<Price> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                event_PricesQuery = queryBuilder.build();
            }
        }
        Query<Price> query = event_PricesQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

}
