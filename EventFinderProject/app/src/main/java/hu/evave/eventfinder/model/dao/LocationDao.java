package hu.evave.eventfinder.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import hu.evave.eventfinder.model.converter.CoordinateConverter;
import java.math.BigDecimal;

import hu.evave.eventfinder.model.Location;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "location".
*/
public class LocationDao extends AbstractDao<Location, String> {

    public static final String TABLENAME = "location";

    /**
     * Properties of entity Location.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Country = new Property(2, String.class, "country", false, "country");
        public final static Property CountryCode = new Property(3, String.class, "countryCode", false, "country_code");
        public final static Property City = new Property(4, String.class, "city", false, "city");
        public final static Property ZipCode = new Property(5, String.class, "zipCode", false, "zip_code");
        public final static Property Address = new Property(6, String.class, "address", false, "address");
        public final static Property Lat = new Property(7, long.class, "lat", false, "lat");
        public final static Property Lon = new Property(8, long.class, "lon", false, "lon");
    }

    private final CoordinateConverter latConverter = new CoordinateConverter();
    private final CoordinateConverter lonConverter = new CoordinateConverter();

    public LocationDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"location\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"country\" TEXT," + // 2: country
                "\"country_code\" TEXT," + // 3: countryCode
                "\"city\" TEXT," + // 4: city
                "\"zip_code\" TEXT," + // 5: zipCode
                "\"address\" TEXT," + // 6: address
                "\"lat\" INTEGER NOT NULL ," + // 7: lat
                "\"lon\" INTEGER NOT NULL );"); // 8: lon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"location\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Location entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(4, countryCode);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(6, zipCode);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindLong(8, latConverter.convertToDatabaseValue(entity.getLat()));
        stmt.bindLong(9, lonConverter.convertToDatabaseValue(entity.getLon()));
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Location entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(4, countryCode);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(6, zipCode);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindLong(8, latConverter.convertToDatabaseValue(entity.getLat()));
        stmt.bindLong(9, lonConverter.convertToDatabaseValue(entity.getLon()));
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Location readEntity(Cursor cursor, int offset) {
        Location entity = new Location( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // country
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // countryCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zipCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            latConverter.convertToEntityProperty(cursor.getLong(offset + 7)), // lat
            lonConverter.convertToEntityProperty(cursor.getLong(offset + 8)) // lon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Location entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountry(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountryCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZipCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLat(latConverter.convertToEntityProperty(cursor.getLong(offset + 7)));
        entity.setLon(lonConverter.convertToEntityProperty(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Location entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Location entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Location entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
