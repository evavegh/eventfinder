package hu.evave.eventfinder.model.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import hu.evave.eventfinder.model.Location;

import hu.evave.eventfinder.model.Event;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "event".
*/
public class EventDao extends AbstractDao<Event, String> {

    public static final String TABLENAME = "event";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property LocationId = new Property(2, String.class, "locationId", false, "location_id");
        public final static Property StartsAt = new Property(3, java.util.Date.class, "startsAt", false, "starts_at");
        public final static Property EndsAt = new Property(4, java.util.Date.class, "endsAt", false, "ends_at");
        public final static Property Summary = new Property(5, String.class, "summary", false, "summary");
        public final static Property Description = new Property(6, String.class, "description", false, "description");
        public final static Property WebUrl = new Property(7, String.class, "webUrl", false, "web_url");
        public final static Property FbUrl = new Property(8, String.class, "fbUrl", false, "fb_url");
        public final static Property IsSaved = new Property(9, boolean.class, "isSaved", false, "is_saved");
    }

    private DaoSession daoSession;


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"event\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"name\" TEXT NOT NULL ," + // 1: name
                "\"location_id\" TEXT NOT NULL ," + // 2: locationId
                "\"starts_at\" INTEGER NOT NULL ," + // 3: startsAt
                "\"ends_at\" INTEGER," + // 4: endsAt
                "\"summary\" TEXT NOT NULL ," + // 5: summary
                "\"description\" TEXT NOT NULL ," + // 6: description
                "\"web_url\" TEXT," + // 7: webUrl
                "\"fb_url\" TEXT," + // 8: fbUrl
                "\"is_saved\" INTEGER NOT NULL );"); // 9: isSaved
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"event\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Event entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getLocationId());
        stmt.bindLong(4, entity.getStartsAt().getTime());
 
        java.util.Date endsAt = entity.getEndsAt();
        if (endsAt != null) {
            stmt.bindLong(5, endsAt.getTime());
        }
        stmt.bindString(6, entity.getSummary());
        stmt.bindString(7, entity.getDescription());
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(8, webUrl);
        }
 
        String fbUrl = entity.getFbUrl();
        if (fbUrl != null) {
            stmt.bindString(9, fbUrl);
        }
        stmt.bindLong(10, entity.getIsSaved() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getLocationId());
        stmt.bindLong(4, entity.getStartsAt().getTime());
 
        java.util.Date endsAt = entity.getEndsAt();
        if (endsAt != null) {
            stmt.bindLong(5, endsAt.getTime());
        }
        stmt.bindString(6, entity.getSummary());
        stmt.bindString(7, entity.getDescription());
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(8, webUrl);
        }
 
        String fbUrl = entity.getFbUrl();
        if (fbUrl != null) {
            stmt.bindString(9, fbUrl);
        }
        stmt.bindLong(10, entity.getIsSaved() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(Event entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // locationId
            new java.util.Date(cursor.getLong(offset + 3)), // startsAt
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // endsAt
            cursor.getString(offset + 5), // summary
            cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // webUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fbUrl
            cursor.getShort(offset + 9) != 0 // isSaved
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setLocationId(cursor.getString(offset + 2));
        entity.setStartsAt(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndsAt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSummary(cursor.getString(offset + 5));
        entity.setDescription(cursor.getString(offset + 6));
        entity.setWebUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFbUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSaved(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Event entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Event entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLocationDao().getAllColumns());
            builder.append(" FROM event T");
            builder.append(" LEFT JOIN location T0 ON T.\"location_id\"=T0.\"id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Event loadCurrentDeep(Cursor cursor, boolean lock) {
        Event entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Location location = loadCurrentOther(daoSession.getLocationDao(), cursor, offset);
         if(location != null) {
            entity.setLocation(location);
        }

        return entity;    
    }

    public Event loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Event> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Event> list = new ArrayList<Event>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Event> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Event> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
