package hu.evave.eventfinder.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import hu.evave.eventfinder.model.EventType;
import hu.evave.eventfinder.model.converter.EventTypeConverter;

import hu.evave.eventfinder.model.EventTypeMapping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "event_type_mapping".
*/
public class EventTypeMappingDao extends AbstractDao<EventTypeMapping, Long> {

    public static final String TABLENAME = "event_type_mapping";

    /**
     * Properties of entity EventTypeMapping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property EventId = new Property(1, String.class, "eventId", false, "event_id");
        public final static Property Type = new Property(2, String.class, "type", false, "type");
    }

    private final EventTypeConverter typeConverter = new EventTypeConverter();
    private Query<EventTypeMapping> event_TypesQuery;

    public EventTypeMappingDao(DaoConfig config) {
        super(config);
    }
    
    public EventTypeMappingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"event_type_mapping\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"event_id\" TEXT," + // 1: eventId
                "\"type\" TEXT NOT NULL );"); // 2: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"event_type_mapping\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EventTypeMapping entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(2, eventId);
        }
        stmt.bindString(3, typeConverter.convertToDatabaseValue(entity.getType()));
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EventTypeMapping entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindString(2, eventId);
        }
        stmt.bindString(3, typeConverter.convertToDatabaseValue(entity.getType()));
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EventTypeMapping readEntity(Cursor cursor, int offset) {
        EventTypeMapping entity = new EventTypeMapping( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // eventId
            typeConverter.convertToEntityProperty(cursor.getString(offset + 2)) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EventTypeMapping entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(typeConverter.convertToEntityProperty(cursor.getString(offset + 2)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EventTypeMapping entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EventTypeMapping entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EventTypeMapping entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "types" to-many relationship of Event. */
    public List<EventTypeMapping> _queryEvent_Types(String eventId) {
        synchronized (this) {
            if (event_TypesQuery == null) {
                QueryBuilder<EventTypeMapping> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.EventId.eq(null));
                event_TypesQuery = queryBuilder.build();
            }
        }
        Query<EventTypeMapping> query = event_TypesQuery.forCurrentThread();
        query.setParameter(0, eventId);
        return query.list();
    }

}
